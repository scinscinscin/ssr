import { Node, Project, SourceFile, ts } from "ts-morph";

export function* iterateNodes(sourceFiles: SourceFile[]) {
  for (const sourceFile of sourceFiles) {
    for (const node of sourceFile.getDescendants()) {
      yield [node, sourceFile] as const;
    }
  }
}

export const findNodeOrThrow = (sourceFiles: SourceFile[], predicate: (node: Node) => boolean) => {
  for (const [node, sourceFile] of iterateNodes(sourceFiles)) {
    if (predicate(node)) {
      return [node, sourceFile] as const;
    }
  }
  throw new Error("Could not find file.");
};

export const isAppRouterAlias = (text: string) => (node: Node) =>
  node.getKind() === ts.SyntaxKind.Identifier &&
  node.getParent()?.getKind() === ts.SyntaxKind.TypeAliasDeclaration &&
  node.getText() === text;

(async () => {
  const here = process.cwd();

  const sourceProject = new Project({
    tsConfigFilePath: `${here}/tsconfig.json`,
    compilerOptions: { outDir: "dist", declaration: true, noEmit: false },
  });

  const sourceFiles = sourceProject.getSourceFiles();

  const [appRouter, rootFile] = findNodeOrThrow(sourceFiles, isAppRouterAlias("AppRouter"));
  appRouter.replaceWithText("ExportedApi");

  const [dstFile] = sourceProject
    .getSourceFileOrThrow(rootFile.getBaseName())
    .getEmitOutput({ emitOnlyDtsFiles: true })
    .getOutputFiles();

  const dstProj = new Project({ tsConfigFilePath: `${here}/tsconfig.json` });
  const outfile = dstProj.createSourceFile(`${here}/src/exportedApi.ts`, dstFile.getText(), { overwrite: true });
  outfile.insertStatements(0, "/* THIS FILE IS AUTOGENERATED DO NOT MODIFY IT DIRECTLY */");
  await dstProj.save();
})();
